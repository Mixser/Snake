{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"project",
				"project_path"
			],
			[
				"ob",
				"obj	IGameObject *"
			],
			[
				"_ga",
				"_game_objects	std::vector<IGameObject *>"
			],
			[
				"Game",
				"GameEngine"
			],
			[
				"p_",
				"p_engine	GameEngine *"
			],
			[
				"message",
				"message_value	uint"
			],
			[
				"GLUT_KEY_P",
				"GLUT_KEY_PAGE_DOWN	macro"
			],
			[
				"dra",
				"draw_grid	bool"
			],
			[
				"GL_PO",
				"GL_POINTS	macro"
			],
			[
				"_gam",
				"_game_stopped	bool"
			],
			[
				"_game",
				"_game_stopped	bool"
			],
			[
				"obj",
				"obj_type	int"
			],
			[
				"glutSetWin",
				"glutSetWindowTitle(const char *title)	void"
			],
			[
				"pu",
				"push_back(value_type &&__x)	void"
			],
			[
				"Gam",
				"GameBase	class"
			],
			[
				"era",
				"erase(iterator __position)	iterator"
			],
			[
				"Get",
				"GetY()	int"
			],
			[
				"G",
				"GetX()	int"
			],
			[
				"_sn",
				"_snake	std::deque<std::pair<int, int> >"
			],
			[
				"_sna",
				"_snake	std::deque<std::pair<int, int> >"
			],
			[
				"mes",
				"message_value	uint"
			],
			[
				"_",
				"_side	int"
			],
			[
				"po",
				"pop_back()	void"
			],
			[
				"Dr",
				"DrawObjects()	void"
			],
			[
				"GL_LINE_ST",
				"GL_LINE_STRIP	macro"
			],
			[
				"GL_LINE",
				"GL_LINES	macro"
			],
			[
				"pop",
				"pop_back()	void"
			],
			[
				"mak",
				"make_pair(_T1 &&__x, _T2 &&__y)	pair<typename __decay_and_strip<_T1>::__type, typename __decay_and_strip<_T2>::__type>"
			],
			[
				"push",
				"push_front(value_type &&__x)	void"
			],
			[
				"de",
				"deque<typename _Tp>	class"
			],
			[
				"vi",
				"viewport_x	int"
			],
			[
				"GLUT_WI",
				"GLUT_WINDOW_WIDTH	macro"
			],
			[
				"GLUT_WIN",
				"GLUT_WINDOW_HEIGHT	macro"
			],
			[
				"viewp",
				"viewport_y	int"
			],
			[
				"vie",
				"viewport_y	int"
			],
			[
				"GL_WINDOW",
				"GLUT_WINDOW_X	macro"
			],
			[
				"stde",
				"stderr	macro"
			],
			[
				"Pin",
				"PrintLog(const char *message, int type)	void"
			],
			[
				"glVertex2i",
				"glVertex2i(GLint x, GLint y)	void"
			],
			[
				"glEn",
				"glEnd()	void"
			],
			[
				"glutRes",
				"glutReshapeWindow(int width, int height)	void"
			],
			[
				"R",
				"Reshape(int, int)	void"
			],
			[
				"spr",
				"sprintf(char *restrict __s, const char *restrict __format, ...)	int"
			],
			[
				"gluOr",
				"gluOrtho2D(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top)	void"
			],
			[
				"Ga",
				"GameEngine"
			],
			[
				"glOr",
				"gluOrtho2D(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top)	void"
			],
			[
				"glutPo",
				"glutPostRedisplay()	void"
			],
			[
				"glCol",
				"glColor3fv(const GLfloat *v)	void"
			],
			[
				"Pr",
				"PrintLog(const char *message, int type)	void"
			],
			[
				"GLEW",
				"GLEW_OK	macro"
			],
			[
				"glew",
				"glewInit()	GLenum"
			],
			[
				"glutLe",
				"glutLeaveMainLoop()	void"
			],
			[
				"GLUTBac",
				"GLUTBackendRun(ICallback *pCallback)	void"
			],
			[
				"GLUT_ACTION",
				"GLUT_ACTION_GLUTMAINLOOP_RETURNS	macro"
			],
			[
				"GLUT_DE",
				"GLUT_DEPTH	macro"
			],
			[
				"glutKe",
				"glutKeyboardUpFunc(void (*callback)(unsigned char, int, int))	void"
			],
			[
				"glutSpeci",
				"glutSpecialFunc(void (*callback)(int, int, int))	void"
			],
			[
				"GLUT_R",
				"GLUT_RGB	macro"
			],
			[
				"glutDIs",
				"glutInitDisplayMode(unsigned int displayMode)	void"
			],
			[
				"WIN",
				"WINDOW_HEIGHT	macro"
			],
			[
				"WID",
				"WINDOW_WIDTH	macro"
			],
			[
				"GLUTCrea",
				"GLUTBackendCreateWindow(unsigned int width, unsigned int height, unsigned int bpp, bool isFullScreen, const char *pTitle)	bool"
			],
			[
				"glutR",
				"glutPostRedisplay()	void"
			],
			[
				"glVertex2f",
				"glVertex2f(GLfloat x, GLfloat y)	void"
			],
			[
				"glutCre",
				"glutCreateWindow(const char *title)	int"
			],
			[
				"glutInitWin",
				"glutInitWindowSize(int width, int height)	void"
			],
			[
				"in",
				"inc	#include \"…\""
			],
			[
				"glutInitW",
				"glutInitWindowSize(int width, int height)	void"
			],
			[
				"GLUT_RGB",
				"GLUT_RGBA	macro"
			],
			[
				"glutInt",
				"glutInitDisplayMode(unsigned int displayMode)	void"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "IsDialogMessage(hWnd - CreateDialog)",
			"settings":
			{
				"buffer_size": 36,
				"line_ending": "Unix",
				"name": "IsDialogMessage(hWnd - CreateDialog)"
			}
		},
		{
			"file": "/home/mixser/PycharmProjects/blog/blog/main/models.py",
			"settings":
			{
				"buffer_size": 1816,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/mixser/PycharmProjects/blog/blog/main/admin.py",
			"settings":
			{
				"buffer_size": 521,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/mixser/PycharmProjects/blog/blog/urls.py",
			"settings":
			{
				"buffer_size": 959,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/tmp/binomial_heap.h",
			"settings":
			{
				"buffer_size": 12104,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "def index(request):\n    last_recently_posts = Post.objects.filter(pub_date__lte=timezone.now()).order_by('-pub_date')\n    error_message = None\n    get_query = request.GET\n    if 'to' in get_query and 'since' in get_query:\n        try:\n            since = datetime.strptime(get_query['since'], '%Y-%m-%d %H:%M')\n            to = datetime.strptime(get_query['to'], '%Y-%m-%d %H:%M')\n        except MultiValueDictKeyError:\n            error_message = 'Bad date format'\n        else:\n            last_recently_posts = Post.objects.filter(pub_date__gte=since, pub_date__lte=to)\n\n    return render(request, 'main/index.html',\n                  {'last_recently_posts': last_recently_posts,\n                   'error_message': error_message})\n\n\n\n\n        <div class=\"pagination\">\n            <span class=\"step-links\">\n                {% if last_recently_posts.has_previous %}\n                    <a href=\"?page={{ last_recently_posts.previous_page_number }}{{ params }}\">previous</a>\n                {% endif %}\n\n                <span class=\"current\">\n                    Page {{ last_recently_posts.number }} of {{ last_recently_posts.paginator.num_pages }}.\n                </span>\n\n                {% if last_recently_posts.has_next %}\n                    <a href=\"?page={{ last_recently_posts.next_page_number }}{{ params }}\">next</a>\n                {% endif %}\n            </span>\n        </div>",
			"settings":
			{
				"buffer_size": 1393,
				"line_ending": "Unix",
				"name": "def index(request):"
			}
		},
		{
			"file": "/home/mixser/Work/virtual-env/vagrant-django/projects/demo_expenses/expenses/shortcuts.py",
			"settings":
			{
				"buffer_size": 1956,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "Packages/User/untitled.sublime-build",
	"command_palette":
	{
		"height": 72.0,
		"selected_items":
		[
			[
				"pkg inst",
				"Package Control: Install Package"
			],
			[
				"pkg re",
				"Package Control: Remove Package"
			],
			[
				"pkg in",
				"Package Control: Install Package"
			]
		],
		"width": 440.0
	},
	"console":
	{
		"height": 125.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/home/mixser/PycharmProjects/blog/blog/main/models.pyc",
		"/home/mixser/PycharmProjects/blog/blog/settings.py",
		"/home/mixser/PycharmProjects/blog/blog/main/views.py",
		"/home/mixser/.cache/.fr-GrUTu4/main.cpp",
		"/home/mixser/PycharmProjects/blog/blog/main/templates/main/application_layout.html",
		"/home/mixser/Анкета студента.txt",
		"/home/mixser/Downloads/PyCharm/readme.txt",
		"/home/mixser/Work/C++/OpenGL/first/src/main.cpp",
		"/home/mixser/Work/C++/OpenGL/first/src/GameEngine.cpp",
		"/home/mixser/Work/C++/OpenGL/first/src/op.cpp",
		"/home/mixser/Work/C++/OpenGL/first/src/Makefile",
		"/home/mixser/Work/C++/OpenGL/first/src/Apple.cpp",
		"/home/mixser/Work/C++/OpenGL/first/src/Snake.cpp",
		"/home/mixser/Work/C++/OpenGL/first/src/GameBase.cpp",
		"/home/mixser/Work/C++/OpenGL/first/sublimegdb_openGL_example.sublime-settings",
		"/home/mixser/Work/C++/OpenGL/first/openGL_example.sublime-project",
		"/home/mixser/.config/sublime-text-2/Packages/User/SublimeGDB.sublime-settings",
		"/home/mixser/.config/sublime-text-2/Packages/User/untitled.sublime-build",
		"/home/mixser/Work/C++/OpenGL/first/src/header/Snake.h",
		"/home/mixser/Work/C++/OpenGL/first/src/header/GameEngine.h",
		"/home/mixser/Work/C++/OpenGL/first/src/header/engine_common.h",
		"/home/mixser/.config/sublime-text-2/Packages/SublimeGDB/SublimeGDB.sublime-settings",
		"/home/mixser/log.txt",
		"/home/mixser/Work/C++/OpenGL/first/src/GlutBackend.cpp",
		"/home/mixser/Work/C++/OpenGL/first/src/header/GlutBackend.h",
		"/home/mixser/Work/C++/OpenGL/first/src/header/ICallback.h",
		"/home/mixser/Work/C++/OpenGL/first/src/header/IGameObject.h",
		"/home/mixser/Work/C++/OpenGL/first/src/header/GameBase.h",
		"/home/mixser/Work/C++/OpenGL/first/src/header/Apple.h",
		"/home/mixser/Work/C++/OpenGL/first/.gitignore",
		"/home/mixser/Work/C++/OpenGL/first/src/util.cpp",
		"/home/mixser/Work/C++/OpenGL/first/Makefile",
		"/usr/include/sys/types.h",
		"/usr/include/GL/glew.h",
		"/home/mixser/Work/C++/OpenGL/first/src/header/util.h",
		"/usr/include/GL/gl.h",
		"/usr/include/GL/freeglut_std.h",
		"/home/mixser/.config/sublime-text-2/Packages/User/OpenGL.sublime-build",
		"/home/mixser/Work/C++/OpenGL/first/src/source.cpp",
		"/home/mixser/Work/C++/OpenGL/first/GameBase.h",
		"/home/mixser/Work/C++/OpenGL/first/ICallback.h",
		"/home/mixser/Work/C++/OpenGL/first/GlutBackend.h",
		"/home/mixser/Work/C++/OpenGL/first/main.cpp",
		"/home/mixser/Work/C++/OpenGL/first/GlutBackend.cpp",
		"/home/mixser/Work/C++/OpenGL/first/GameBase.cpp",
		"/home/mixser/Work/C++/OpenGL/first/util.h",
		"/home/mixser/Work/C++/OpenGL/first/util.cpp",
		"/home/mixser/Work/C++/OpenGL/first/engine_common.h",
		"/home/mixser/Work/C++/OpenGL/first/util.h.txt",
		"/usr/include/stdio.h",
		"/home/mixser/Work/C++/OpenGL/first/source.cpp",
		"/home/mixser/Work/C++/OpenGL/first/openGL_example.sublime-workspace",
		"/home/mixser/.config/sublime-text-2/Packages/SublimeClang/SublimeClang.sublime-settings",
		"/home/mixser/Work/C++/OpenGL/first/1",
		"/usr/include/c++/4.8.2/iostream",
		"/home/mixser/.config/sublime-text-2/Packages/User/Preferences.sublime-settings",
		"/home/mixser/.config/sublime-text-2/Packages/Default/Preferences.sublime-settings"
	],
	"find":
	{
		"height": 34.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"STAT",
			"_user",
			"Coll",
			"break",
			"p_engine",
			"Render",
			"_user",
			"_snake",
			"_user",
			"Coll",
			"GameBase",
			"sett",
			"lGL",
			"sett"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 5,
			"sheets":
			[
				{
					"buffer": 0,
					"settings":
					{
						"buffer_size": 36,
						"regions":
						{
						},
						"selection":
						[
							[
								35,
								35
							]
						],
						"settings":
						{
							"auto_name": "IsDialogMessage(hWnd - CreateDialog)",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/home/mixser/PycharmProjects/blog/blog/main/models.py",
					"settings":
					{
						"buffer_size": 1816,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "/home/mixser/PycharmProjects/blog/blog/main/admin.py",
					"settings":
					{
						"buffer_size": 521,
						"regions":
						{
						},
						"selection":
						[
							[
								96,
								96
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "/home/mixser/PycharmProjects/blog/blog/urls.py",
					"settings":
					{
						"buffer_size": 959,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "/tmp/binomial_heap.h",
					"settings":
					{
						"buffer_size": 12104,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 5967.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 5,
					"settings":
					{
						"buffer_size": 1393,
						"regions":
						{
						},
						"selection":
						[
							[
								737,
								737
							]
						],
						"settings":
						{
							"auto_name": "def index(request):",
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "/home/mixser/Work/virtual-env/vagrant-django/projects/demo_expenses/expenses/shortcuts.py",
					"settings":
					{
						"buffer_size": 1956,
						"regions":
						{
						},
						"selection":
						[
							[
								295,
								295
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 0.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.clang":
	{
		"height": 100.0
	},
	"output.exec":
	{
		"height": 100.0
	},
	"replace":
	{
		"height": 0.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"show_minimap": false,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 153.0,
	"status_bar_visible": true
}
